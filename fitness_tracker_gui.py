import tkinter as tk
from tkinter import messagebox, ttk
import csv
import matplotlib.pyplot as plt
from fpdf import FPDF
import os
from datetime import datetime
import openpyxl

FILENAME = "fitness_data.csv"
GOAL_STEPS = 8000

def save_data():
    name = name_entry.get()
    date = date_entry.get()
    steps = steps_entry.get()
    calories = calories_entry.get()
    water = water_entry.get()
    weight = weight_entry.get()
    height = height_entry.get()

    if not (name and date and steps and calories and water and weight and height):
        messagebox.showwarning("Warning", "Please fill in all fields.")
        return

    try:
        datetime.strptime(date, "%Y-%m-%d")
    except ValueError:
        messagebox.showwarning("Invalid Date", "Please enter date in YYYY-MM-DD format.")
        return

    bmi = calculate_bmi(float(weight), float(height))

    with open(FILENAME, "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([name, date, steps, calories, water, weight, height, round(bmi, 2)])

    messagebox.showinfo("Saved", "Data saved successfully!")
    clear_entries()

def calculate_bmi(weight, height_cm):
    height_m = height_cm / 100
    return weight / (height_m ** 2)

def clear_entries():
    for entry in [name_entry, date_entry, steps_entry, calories_entry, water_entry, weight_entry, height_entry]:
        entry.delete(0, tk.END)

def export_pdf():
    if not os.path.exists(FILENAME):
        messagebox.showerror("Error", "No data to export.")
        return

    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # Title section
    pdf.set_fill_color(70, 130, 180)  # Steel Blue
    pdf.set_text_color(255, 255, 255)
    pdf.set_font("Arial", 'B', 18)
    pdf.cell(0, 10, "Fitness Tracker Report", ln=True, align="C", fill=True)
    pdf.ln(10)

    # Table Headers
    headers = ["Name", "Date", "Steps", "Calories", "Water (L)", "Weight (kg)", "Height (cm)"]
    pdf.set_font("Arial", 'B', 12)
    pdf.set_fill_color(200, 220, 255)
    pdf.set_text_color(0)

    for header in headers:
        pdf.cell(28, 10, header, border=1, align='C', fill=True)
    pdf.ln()

    # Table Data
    pdf.set_font("Arial", '', 11)
    with open(FILENAME, "r") as f:
        reader = csv.reader(f)
        for row in reader:
            if len(row) < 7:
                continue
            for col in row:
                pdf.cell(28, 10, col, border=1, align='C')
            pdf.ln()

    # Averages section
    avg_steps, avg_calories, avg_water, avg_weight, avg_height = calculate_averages()
    pdf.ln(8)
    pdf.set_font("Arial", 'B', 12)
    pdf.set_text_color(70, 130, 180)
    pdf.cell(0, 10, "Summary Statistics", ln=True)
    pdf.set_text_color(0)
    pdf.set_font("Arial", '', 11)
    pdf.cell(0, 8, f"Average Steps: {avg_steps:.2f}", ln=True)
    pdf.cell(0, 8, f"Average Calories: {avg_calories:.2f}", ln=True)
    pdf.cell(0, 8, f"Average Water Intake: {avg_water:.2f} L", ln=True)
    pdf.cell(0, 8, f"Average Weight: {avg_weight:.2f} kg", ln=True)
    pdf.cell(0, 8, f"Average Height: {avg_height:.2f} cm", ln=True)

    # Plot section
    plot_steps_over_time()
    if os.path.exists("steps_plot.png"):
        pdf.ln(5)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, "Steps Over Time Chart:", ln=True)
        pdf.image("steps_plot.png", x=20, w=170)

    # Footer
    pdf.set_y(-20)
    pdf.set_font("Arial", 'I', 9)
    pdf.set_text_color(120, 120, 120)
    pdf.cell(0, 10, "Generated by Fitness Tracker App", ln=True, align='C')

    pdf.output("fitness_report.pdf")
    messagebox.showinfo("Exported", "PDF exported successfully as 'fitness_report.pdf'.")

def calculate_averages():
    steps, calories, water, weight, height = [], [], [], [], []

    with open(FILENAME, "r") as f:
        rows = csv.reader(f)
        for row in rows:
            try:
                steps.append(int(row[2]))
                calories.append(int(row[3]))
                water.append(float(row[4]))
                weight.append(float(row[5]))
                height.append(float(row[6]))
            except (IndexError, ValueError):
                continue

    if not steps:
        return 0, 0, 0, 0, 0

    return (sum(steps)/len(steps), sum(calories)/len(calories),
            sum(water)/len(water), sum(weight)/len(weight), sum(height)/len(height))

def plot_steps_over_time():
    dates, steps = [], []

    with open(FILENAME, "r") as f:
        rows = csv.reader(f)
        for row in rows:
            try:
                date = row[1]
                step_count = int(row[2])
                dates.append(date)
                steps.append(step_count)
            except (IndexError, ValueError):
                continue

    if not dates or not steps:
        return

    plt.figure(figsize=(10, 6))
    plt.plot(dates, steps, marker='o', linestyle='-', color='blue')
    plt.axhline(y=GOAL_STEPS, color='green', linestyle='--', label='Step Goal')
    plt.title('Steps Over Time')
    plt.xlabel('Date')
    plt.ylabel('Steps')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.savefig("steps_plot.png")
    plt.close()

def view_data():
    if not os.path.exists(FILENAME):
        messagebox.showinfo("Info", "No data available.")
        return

    top = tk.Toplevel()
    top.title("View Data")

    tree = ttk.Treeview(top)
    tree.pack(fill='both', expand=True)

    tree["columns"] = ("Name", "Date", "Steps", "Calories", "Water", "Weight", "Height", "BMI")
    for col in tree["columns"]:
        tree.heading(col, text=col)
        tree.column(col, anchor="center")

    with open(FILENAME, "r") as f:
        reader = csv.reader(f)
        for row in reader:
            if len(row) >= 8:
                tree.insert("", "end", values=row)

def clear_csv():
    if messagebox.askyesno("Confirm", "Are you sure you want to clear all data?"):
        with open(FILENAME, "w", newline="") as f:
            pass
        messagebox.showinfo("Cleared", "All data cleared successfully.")

def export_excel():
    if not os.path.exists(FILENAME):
        messagebox.showerror("Error", "No data to export.")
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Fitness Data"

    with open(FILENAME, "r") as f:
        reader = csv.reader(f)
        for row in reader:
            ws.append(row)

    wb.save("fitness_data.xlsx")
    messagebox.showinfo("Exported", "Data exported to 'fitness_data.xlsx'.")

# -------------------- GUI --------------------
root = tk.Tk()
root.title("Fitness Tracker")

labels = ["Name", "Date (YYYY-MM-DD)", "Steps", "Calories", "Water (L)", "Weight (kg)", "Height (cm)"]
entries = []

for i, label in enumerate(labels):
    tk.Label(root, text=label).grid(row=i, column=0)
    entry = tk.Entry(root)
    entry.grid(row=i, column=1)
    entries.append(entry)

name_entry, date_entry, steps_entry, calories_entry, water_entry, weight_entry, height_entry = entries

buttons = [
    ("Save", save_data),
    ("Export PDF", export_pdf),
    ("View Data", view_data),
    ("Clear All Data", clear_csv),
    ("Export to Excel", export_excel)
]

for i, (text, cmd) in enumerate(buttons):
    tk.Button(root, text=text, command=cmd).grid(row=7+i, column=0, columnspan=2, pady=5)

root.mainloop()
